# Generated by Django 2.2 on 2020-10-17 15:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='CLASS', default=' ', max_length=20, verbose_name='분반')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='생성일')),
                ('is_delete', models.BooleanField(db_column='IS_DELETE', default=False, verbose_name='삭제여부')),
                ('use_group', models.BooleanField(db_column='USE_GROUP', default=False, verbose_name='그룹 사용 여부')),
            ],
            options={
                'verbose_name': '클래스정보',
                'verbose_name_plural': '클래스정보',
                'db_table': 'CLASS',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=20, verbose_name='codename')),
                ('code', models.TextField(db_column='CODE', verbose_name='코드')),
                ('available_game', models.BooleanField(db_column='AVAILABLE_GAME', default=True, verbose_name='게임가능코드')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='작성/수정일')),
                ('status', models.CharField(db_column='STATUS', default='FAIL', max_length=20, verbose_name='상태')),
                ('is_delete', models.BooleanField(db_column='IS_DELETE', default=False, verbose_name='삭제여부')),
                ('open_code', models.IntegerField(db_column='OPEN_CODE', default=0, verbose_name='코드 공개 여부')),
                ('author', models.ForeignKey(db_column='AUTHOR', on_delete=django.db.models.deletion.PROTECT, related_name='user_code_author', to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
            ],
            options={
                'verbose_name': '코드정보',
                'verbose_name_plural': '코드정보',
                'db_table': 'CODE',
                'ordering': ['id', 'problem__id', 'author__id'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('C', 'C'), ('C++', 'C++'), ('PYTHON', 'PYTHON'), ('JAVA', 'JAVA')], db_column='NAME', max_length=30, unique=True, verbose_name='language name')),
            ],
            options={
                'verbose_name': '언어',
                'verbose_name_plural': '언어',
                'db_table': 'LANGUAGE',
                'ordering': ['id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('user', models.OneToOneField(db_column='USER', on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='userInfo', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='유저')),
                ('language', models.CharField(choices=[('C', 'C'), ('C++', 'C++'), ('PYTHON', 'PYTHON'), ('JAVA', 'JAVA')], db_column='LANGUAGE', max_length=50, verbose_name='언어')),
                ('nickname', models.CharField(db_column='NICKNAME', default='Anonymous', max_length=40, verbose_name='닉네임')),
                ('isCodeOpen', models.BooleanField(db_column='isCodeOpen', default=False, verbose_name='코드공개여부')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='가입날짜')),
                ('profileImage', models.ImageField(db_column='PROFILEIMAGE', default='media/default.jpg', upload_to='', verbose_name='프로필 사진')),
                ('group', models.ForeignKey(blank=True, db_column='GROUP', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='group_userInfo_group', to='auth.Group', verbose_name='그룹')),
            ],
            options={
                'verbose_name': '유저 정보',
                'verbose_name_plural': '유저 정보',
                'db_table': 'USERINFO',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='생성일')),
                ('is_delete', models.BooleanField(db_column='IS_DELETE', default=False, verbose_name='삭제여부')),
                ('group_id', models.ForeignKey(db_column='GROUP ID', on_delete=django.db.models.deletion.PROTECT, related_name='group', to='auth.Group', verbose_name='그룹')),
                ('user_id', models.ForeignKey(db_column='USER ID', on_delete=django.db.models.deletion.PROTECT, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='유저 ID')),
            ],
            options={
                'verbose_name': '그룹 유저 정보',
                'verbose_name_plural': '그룹 유저 정보',
                'db_table': 'USERGROUP',
                'ordering': ['pk', 'group_id', 'user_id'],
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False, verbose_name='서로게이트키')),
                ('title', models.CharField(db_column='TITLE', default=' ', max_length=50, verbose_name='문제이름')),
                ('description', models.FileField(db_column='DESCRIPTION', default='media/default.jpg', upload_to='', verbose_name='문제PDF')),
                ('limit_time', models.IntegerField(db_column='LIMIT_TIME', default=1000, verbose_name='제한시간(ms)')),
                ('limit_memory', models.IntegerField(db_column='LIMIT_MEMORY', default=128, verbose_name='제한메모리(MB)')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='작성/수정일')),
                ('thumbnail', models.ImageField(db_column='THUMBNAIL', default='media/default.jpg', upload_to='', verbose_name='문제썸네일')),
                ('board_size', models.IntegerField(db_column='BOARD_SIZE', default=8, verbose_name='보드 크기')),
                ('board_info', models.TextField(db_column='BOARD_INFO', default='[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]', verbose_name='시작 보드 정보')),
                ('rule', models.TextField(db_column='RULE', default='{"obj_num": ,"placement" : , "action" : , "ending": ,}', verbose_name='문제 규칙')),
                ('is_delete', models.BooleanField(db_column='IS_DELETE', default=False, verbose_name='삭제여부')),
                ('editor', models.ForeignKey(db_column='EDITOR', on_delete=django.db.models.deletion.PROTECT, related_name='user_problem_editor', to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
            ],
            options={
                'verbose_name': '문제:기본정보',
                'verbose_name_plural': '문제:기본정보',
                'db_table': 'PROBLEM',
                'ordering': ['id', 'editor__id'],
            },
        ),
        migrations.CreateModel(
            name='GroupInfo',
            fields=[
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='groupInfo', serialize=False, to='auth.Group', verbose_name='그룹')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='그룹 생성날짜')),
                ('is_delete', models.BooleanField(db_column='IS_DELETE', default=False, verbose_name='삭제여부')),
                ('class_id', models.ForeignKey(db_column='CLASS', on_delete=django.db.models.deletion.PROTECT, related_name='group_class', to='onepanman_api.Class', verbose_name='분반')),
            ],
            options={
                'verbose_name': '그룹정보',
                'verbose_name_plural': '그룹정보',
                'db_table': 'GROUPINFO',
                'ordering': ['group__id'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.TextField(db_column='RECORD', default='[]', verbose_name='게임기록')),
                ('placement_record', models.TextField(db_column='PLACEMENT_RECORD', default='[]', verbose_name='착수기록')),
                ('winner', models.CharField(db_column='WINNER', default='None', max_length=50, verbose_name='승리자')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='DATE', verbose_name='대전 시각')),
                ('result', models.CharField(choices=[('playing', 'playing'), ('finish', 'finish'), ('challenger_error', 'challenger_error'), ('opposite_error', 'opposite_error')], db_column='RESULT', default='playing', max_length=50, verbose_name='결과')),
                ('error_msg', models.TextField(db_column='ERROR_MSG', default='no error', verbose_name='에러메세지')),
                ('type', models.CharField(db_column='TYPE', default='normal', max_length=20, verbose_name='game type')),
                ('challenger_code', models.ForeignKey(db_column='CHALLENGER_CODE', on_delete=django.db.models.deletion.PROTECT, related_name='code_game_challenger_code', to='onepanman_api.Code', verbose_name='도전자코드')),
                ('opposite_code', models.ForeignKey(db_column='OPPOSITE_CODE', on_delete=django.db.models.deletion.PROTECT, related_name='code_game_opposite_code', to='onepanman_api.Code', verbose_name='상대방코드')),
            ],
            options={
                'verbose_name': '게임정보',
                'verbose_name_plural': '게임정보',
                'db_table': 'GAME',
                'ordering': ['id', 'problem__id', '-date'],
            },
        ),
        migrations.AddField(
            model_name='code',
            name='language',
            field=models.ForeignKey(db_column='LANGUAGE', on_delete=django.db.models.deletion.PROTECT, related_name='language_code_language', to='onepanman_api.Language', verbose_name='언어'),
        ),
        migrations.AddField(
            model_name='code',
            name='problem',
            field=models.ForeignKey(db_column='PROBLEM', on_delete=django.db.models.deletion.PROTECT, related_name='problem_code_problem', to='onepanman_api.Problem', verbose_name='문제'),
        ),
        migrations.CreateModel(
            name='ClassProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_id', models.ForeignKey(db_column='CLASS ID', on_delete=django.db.models.deletion.PROTECT, related_name='Class', to='onepanman_api.Class', verbose_name='분반')),
                ('problem_id', models.ForeignKey(db_column='PROBLEM ID', on_delete=django.db.models.deletion.PROTECT, related_name='problem', to='onepanman_api.Problem', verbose_name='문제 ID')),
            ],
            options={
                'verbose_name': '분반 문제 정보',
                'verbose_name_plural': '분반 문제 정보',
                'db_table': 'CLASSPROBLEM',
                'ordering': ['pk', 'class_id', 'problem_id'],
            },
        ),
    ]

{"code_id": 33, "challenger": 1, "challenger_code": "import random\nimport math\n\nboard = []\n\nDEBUG = False\n\nME = 1\nENEMY = -1\nBOARD_SIZE = 8\nADD, JUMP = 1, 2\n\nCHECK_RANGE_ONE = [-1, 0, 1]\nCHECK_RANGE_TWO = [-2, -1, 0, 1, 2]\nCHECK_RANGE_THR = [-3, -2, -1, 0, 1, 2, 3]\n# JUMP_ONLY_RANGE = list(set(CHECK_RANGE_TWO) - set(CHECK_RANGE_ONE))\nCENTER = (4.5, 4.5)\n\n\ndef printd(s):\n    if DEBUG:\n        print(s)\n\n\ndef action(x, y, action, ox=None, oy=None):\n    global ME, ADD, JUMP\n    if action == ADD:\n        return f\"{ME} {x} {y}\"\n    else:\n        return f\"{ox} {oy} > {x} {y}\"\n\n\ndef isJump(i, j):\n    return abs(i) == JUMP or abs(j) == JUMP\n\n\ndef find_my_dols():\n    global board, BOARD_SIZE\n    dols = []\n    for i in range(BOARD_SIZE):\n        for j in range(BOARD_SIZE):\n            dol = board[i][j]\n            # print(i, j, dol)\n            if dol == 1:\n                dols.append((i, j))\n    return dols\n\n\ndef find_available_places(dols):\n    global CHECK_RANGE_ONE, CHECK_RANGE_TWO, ADD, JUMP, board\n\n    zero_cell = []\n    for row, col in dols:\n        # check cells have 0\n        for i in CHECK_RANGE_TWO:\n            r = row+i\n            if r < 0 or r > 7:\n                continue\n            for j in CHECK_RANGE_TWO:\n                c = col+j\n                # print(r, c)\n                if (i == 0 and j == 0) or (c < 0 or c > 7):\n                    continue\n                if board[r][c] == 0:\n                    action = ADD\n                    if isJump(i, j):\n                        action = JUMP\n                    zero_cell.append(((row, col), (r, c), action))\n    return list(set(zero_cell))\n\n\ndef check_type(row, col):\n    if row > 0 or col > 0:\n        return 1\n    elif row < 0 or col < 0:\n        return 2\n    return 0\n\n\ndef check_around(row, col, check_range):\n    global board, ME, ENEMY\n    result = {\n        1: {\n            \"me\": 0,\n            \"enemy\": 0,\n            \"blank\": 0,\n        },\n        2: {\n            \"me\": 0,\n            \"enemy\": 0,\n            \"blank\": 0,\n        },\n        0: {\n            \"me\": 0,\n            \"enemy\": 0,\n            \"blank\": 0,\n            \"wall\": 0,\n            \"cd\": 0,\n        }\n    }\n\n    for i in check_range:\n        r = row+i\n\n        if r < 0 or r > 7:\n            result[0][\"wall\"] += 3\n            continue\n\n        for j in check_range:\n            c = col+j\n\n            if (i == 0 and j == 0):\n                continue\n            if (c < 0 or c > 7):\n                result[0][\"wall\"] += 1\n                continue\n\n            quter = check_type(i, j)\n            if board[r][c] == ENEMY:\n                result[quter][\"enemy\"] += 1\n                result[0][\"enemy\"] += 1\n            elif board[r][c] == ME:\n                result[quter][\"me\"] += 1\n                result[0][\"me\"] += 1\n            elif board[r][c] == 0:\n                result[quter][\"blank\"] += 1\n                result[0][\"blank\"] += 1\n\n            cr, cc = CENTER\n            l1, l2 = cr - r, cc - c\n            cd = math.sqrt(math.pow(l1, 2) + math.pow(l2, 2))\n            result[0][\"cd\"] = cd\n    return result\n\n\ndef calculate_point(after, action_flg, original):\n    global CHECK_RANGE_ONE, CHECK_RANGE_TWO,  board, ME, ENEMY\n\n    point = 0\n    row, col = after\n\n    if action_flg == ADD:\n        point += 15\n        around = check_around(row, col, CHECK_RANGE_ONE)\n        point += 10 * around[0][\"enemy\"]\n        point += 3 * around[0][\"me\"]\n        point += 1 * around[0][\"blank\"]\n        point -= 1 * around[0][\"cd\"]\n        if around[0][\"enemy\"] != 0:\n            point += 2 * around[0][\"wall\"]\n        else:\n            aroud = check_around(row, col, CHECK_RANGE_TWO)\n            if around[0][\"enemy\"] != 0:\n                point -= 15\n    elif action_flg == JUMP:\n        orow, ocol = original\n\n        # jump -> enemy would attack me. minus point\n        around = check_around(orow, ocol, CHECK_RANGE_TWO)\n        if around[0][\"enemy\"] != 0:\n            point -= 2 * around[0][\"me\"]\n            point -= 1 * around[0][\"blank\"]\n            point += 1 * around[0][\"wall\"]\n\n        around = check_around(row, col, CHECK_RANGE_ONE)\n        point += 10 * around[0][\"enemy\"]\n        point += 3 * around[0][\"me\"]\n        point += 1 * around[0][\"blank\"]\n        point -= 1.5 * around[0][\"cd\"]\n\n    return point\n\n\ndef solve():\n    global CHECK_RANGE_ONE, CHECK_RANGE_TWO, board\n\n    dols = find_my_dols()\n    dols_num = len(dols)\n\n    x = 0\n    y = 0\n    zero_cell = find_available_places(dols)\n    pointed_zero_cell = []\n    for original, after, action_flg in zero_cell:\n        row, col = after\n        point = calculate_point(after, action_flg, original)\n\n        # if new max point appear, clear list ans insert new row, col\n        # print(pointed_zero_cell)\n        if len(pointed_zero_cell) > 0 and point > pointed_zero_cell[0][0]:\n            pointed_zero_cell.clear()\n        if len(pointed_zero_cell) == 0 or point == pointed_zero_cell[0][0]:\n            pointed_zero_cell.append(\n                (point, action(*after, action_flg, *original)))\n\n    printd(pointed_zero_cell)\n    cell = random.choice(pointed_zero_cell)\n    print(cell[1])\n\n\nif __name__ == '__main__':\n    import sys\n    if sys.argv.pop() == \"-t\":\n        DEBUG = True\n        board = [\n            [1, 1, 1, 0, 0, 0, 0, -1],\n            [-1, 0, 1, 0, 0, -1, -1, 0],\n            [-1, 0, 1, 1, -1, -1, 0, 0],\n            [-1, 0, -1, 1, 0, -1, 0, 0],\n            [-1, 0, -1, 0, -1, -1, 0, 0],\n            [-1, -1, 0, 0, 0, 0, 0, 0],\n            [-1, -1, 0, 0, -1, -1, -1, -1],\n            [-1, 0, -1, -1, -1, 1, 1, 1],\n        ]\n        board = [\n            [0 for i in range(BOARD_SIZE)] for j in range(BOARD_SIZE)\n        ]\n        board[0][0] = 1\n        board[7][7] = 1\n        board[0][7] = -1\n        board[7][0] = -1\n\n        solve()\n    else:\n        for i in range(BOARD_SIZE):\n            line = input()\n            board.append(list(map(int, line.strip('\\n').split())))\n        solve()", "challenger_language": "PYTHON", "rule": [{"id": 1, "type": "add & move", "placementRule": "2", "actionCondition": "1", "actionDir": "5", "actionMethod": "1"}, {"id": 2, "type": null, "placementRule": null, "actionCondition": null, "actionDir": null, "actionMethod": null}, {"id": 3, "type": null, "placementRule": null, "actionCondition": null, "actionDir": null, "actionMethod": null}, {"id": 4, "type": null, "placementRule": null, "actionCondition": null, "actionDir": null, "actionMethod": null}], "board_size": 8, "board_info": "1 0 0 0 0 0 0 -1\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n-1 0 0 0 0 0 0 1", "problem": 7}
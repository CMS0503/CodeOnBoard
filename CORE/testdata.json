{"code_id": 24, "challenger": 2, "challenger_code": "import random\ndef placement(board):\n    my_stones = []\n    for x, linee in enumerate(board):\n        for y, i in enumerate(linee):\n            if i > 0:\n                my_stones.append((i, x, y))\n    while my_stones:\n        rule = []\n        random.shuffle(my_stones)\n        stone = my_stones.pop()\n        ## for test\n        # stone = [2, 6, 4]\n        if stone[0] == 1:\n            rule = [(0, 1), (1, 0), (0, -1), (-1, 0), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n        elif stone[0] == 2:\n            rule = [[0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 7]]\n            rule[0].remove(stone[1])\n            rule[1].remove(stone[2])\n        else:\n            rule = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        while rule:\n            x = stone[1]\n            y = stone[2]\n            if stone[0] == 2:\n                dir = random.choice(range(2))\n                ## for test\n                # dir = 0\n                if dir == 0 and rule[0]:\n                    x = random.choice(rule[0])\n                    rule[0].remove(x)\n                    if is_stone(board, stone, stone[1], x, 0) is False:\n                        continue\n                else:\n                    y = random.choice(rule[1])\n                    rule[1].remove(y)\n                    if is_stone(board, stone, stone[2], y, 1) is False:\n                        continue\n            else:\n                random.shuffle(rule)\n                pos = rule.pop()\n                x = stone[1] + pos[0]\n                y = stone[2] + pos[1]\n            if move_available(board, (x, y)) is True:\n                print(stone[1], stone[2], '>', x, y)\n                return\n\ndef move_available(board, pos):\n    if pos[0] > 7 or pos[0] < 0 or pos[1] > 7 or pos[1] < 0:\n        return False\n    if board[pos[0]][pos[1]] > 0:\n        return False\n    return True\n\ndef is_stone(board, pos, pre_v, v, dir):\n    # print(pos, pre_v, v, dir)\n    if pre_v < v:\n        min = pre_v+1\n        max = v+1\n    else:\n        min = v\n        max = pre_v\n\n    # print('min, max', min, max)\n    if dir == 0:\n        for i in range(min, max):\n            if board[i][pos[2]] != 0:\n                return False\n    else:\n        for i in range(min, max):\n            if board[pos[1]][i] != 0:\n                return False\n    \n    return True\n\n\nif __name__ == '__main__':\n    board = []\n    for i in range(8):\n        line = input()\n        board.append(list(map(int, line.strip('\\n').split())))\n    # for line in board:\n        # print(line)\n    placement(board)", "challenger_language": "PYTHON", "placement": {"1": [1, [3], []], "2": [1, [5], []], "3": [1, [4], []]}, "action": {"1": [0, 0, 0], "2": [0, 0, 0], "3": [0, 0, 0]}, "ending": 0, "board_size": 8, "board_info": "0 0 0 -2 -1 0 0 0 0 0 0 -3 -3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 0 0 0 0 0 0 1 2 0 0 0", "problem": 3}